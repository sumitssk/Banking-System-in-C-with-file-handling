#include<iostream>
#include<bits/stdc++.h>
#include<cstdlib>
#include<fstream>
using namespace std;

#define MIN_BALANCE 500
class InsufficientFunds : public std::exception{
  public:
    const char* what() const noexcept override{
         return "Insufficent funds for this trancation.";
       }
};
class Account
{
private:
    long AccountNumber;
    string firstName;
    string lastName;
    float balance;
    string type;
    static long NextAccountNumber;
public:
    Account(){}
    Account(string fName,string lName,string type,float amount);
    long getAccNo(){return AccountNumber;}
    string getType(){return type;}
    string getFirstName(){return firstName;}
    string getLastName(){return lastName;}
    float getBalance(){return balance;}

    void Deposit(float amount);
    void Withdrawl(float amount);
    static void setLastAccountNumber(long accountNumber);
    static long getLastAccountNumber();
    friend ofstream & operator<<(ofstream &ofs,Account &acc);
    friend ifstream & operator>>(ifstream &ifs,Account &acc);

    friend ostream & operator<<(ostream &os,Account &acc);
};

long Account::NextAccountNumber=0;
class SkBank
{
private:
    map<long,Account> accounts;
public:
    SkBank();
    Account OpenAccount(string fName,string lName,string type,float balance);
    Account BalanceEnquiry(long accountNumber);
    Account Deposit(long accountNumber,float amount);
    Account Withdraw(long accountNumber,float amount);
    void ShowAllAccounts();
    void CloseAccount(long accountNumber);
    ~SkBank();
};
int main()
{
    Account acc;
    long accNo;
    SkBank b;
    float balance,amount;
    int choice;
    string fName,lName;
    string type;


    cout<<"\n--*****--Welcome to Sk Bank Systems--*****--"<<endl;
    cout<<endl;
    cout<<endl;
    do{
        cout<<"\nSelect the option that you want to execute";
        cout<<endl;
        cout<<endl;
        cout<<"\n*******************************";

        cout<<"\n 1. Open an Account";
        cout<<"\n 2. Balance Enquiry";
        cout<<"\n 3. Deposit Money";
        cout<<"\n 4. Withdraw Money";
        cout<<"\n 5. Close an Account";
        cout<<"\n 6. Show all Accounts";
        cout<<"\n 7.  Exit";
        cout<<"\n*******************************";
        cout<<endl;
        cout<<endl;
        cout<<"\nEnter the operation that you want to execute:";
        cin>>choice;
        switch(choice)
        {
            case 1:
                cout<<"\nEnter your First Name: ";
                cin>>fName;
                cout<<"\nEnter your Last/Surname: ";
                cin>>lName;
                cout<<"\nEnter the type of Account you want to create (Saving/Current): ";
                cin>>type;
                cout<<"\nEnter initial balance you want to deposit: ";
                cin>>amount;
                acc=b.OpenAccount(fName,lName,type,amount);
                cout<<"\n Congradulation You have Successfully Opened an Account in Sk bank systems";
                cout<<endl;
                cout<<endl;
                cout<<"\n Your account info is: "<<"\n"<<acc;
                cout<<endl;
                cout<<endl;
                break;
            case 2:
                cout<<"\nEnter your account Number: ";
                cin>>accNo;
                acc=b.BalanceEnquiry(accNo);
                cout<<"\n"<<acc;
                cout<<endl;
                break;

            case 3:
                cout<<"\nEnter your account number: ";
                cin>>accNo;
                cout<<"\nEnter the money you want to Deposit: ";
                cin>>amount;
                try{
                    acc=b.Deposit(accNo,amount);
                }
                catch(...)
                {

                    cout<<endl<<"Account not found"<<endl;
                    break;
                }
                cout<<"\nMoney is Deposited\n"<<endl;
                cout<<acc;
                break;

            case 4:
                cout<<"\nEnter your account number: ";
                cin>>accNo;
                cout<<"\nEnter the money you want to Withdraw: ";
                cin>>amount;
                try{
                    acc=b.Withdraw(accNo,amount);
                }
                catch(InsufficientFunds& e){
                   cout<<"ERROR:"<<e.what()<<endl;
                   break;
                }
                catch(...)
                {
                    cout<<endl<<"Account not found"<<endl;
                    break;
                }
                cout<<"\nMoney is withdrawn\n"<<endl;
                cout<<acc;
                break;
            case 5:
                cout<<"\nEnter your account number: ";
                cin>>accNo;
                b.CloseAccount(accNo);

                break;
            case 6:
                b.ShowAllAccounts();
                break;
            case 7:
                break;

            default:

                if(choice>7)
                {
                    cout<<"\n\n";
                    cout<<"The operation you have select is not in list"<<endl;
                    cout<<"Enter correct operation"<<endl;
                    cout<<"\n\n";
                    cout<<endl;
                    cout<<endl;
                }

                break;
        }

    }while(choice!=7);
    return 0;
}

Account::Account(string fName,string lName,string type,float amount)
{
    NextAccountNumber++;
    AccountNumber=NextAccountNumber;
    firstName=fName;
    lastName=lName;
    this->type=type;
    balance=amount;

}
void Account::Deposit(float amount)
{
    balance+=amount;
}
void Account::Withdrawl(float amount)
{
    if(balance-amount<MIN_BALANCE)
       throw InsufficientFunds();
    balance-=amount;
}
void Account::setLastAccountNumber(long accountNumber)
{
   NextAccountNumber=accountNumber;
}
long Account::getLastAccountNumber()
{
   return NextAccountNumber;
}
ofstream & operator<<(ofstream & ofs,Account & acc)
{
    ofs<<acc.AccountNumber<<endl;
    ofs<<acc.firstName<<endl;
    ofs<<acc.lastName<<endl;
    ofs<<acc.type<<endl;
    ofs<<acc.balance<<endl;
    return ofs;
}
ifstream & operator>>(ifstream & ifs,Account & acc)
{
    ifs>>acc.AccountNumber;
    ifs>>acc.firstName;
    ifs>>acc.lastName;
    ifs>>acc.type;
    ifs>>acc.balance;
    return ifs;
}
ostream & operator<<(ostream & os,Account & acc)
{
    os<<"First Name:"<<acc.getFirstName()<<endl;
    os<<"Last Name:"<<acc.getLastName()<<endl;
    os<<"Account Number:"<<acc.getAccNo()<<endl;
    os<<"Account Type is "<<acc.getType()<<endl;
    os<<"Balance:"<<acc.getBalance()<<endl;
    return os;
}

SkBank::SkBank()
{

    Account account;
    ifstream infile;

    infile.open("SkBank.data");
    if(!infile)
    {
        cout<<"Error in opening the file!!"<<endl;
        return ;
    }
    while(infile>>account)
    {

        //infile>>account;
        accounts.insert(pair<long,Account>(account.getAccNo(),account));

    }
    if(!accounts.empty())
    {
        Account ::setLastAccountNumber(account.getAccNo());
    }
    else{
        Account::setLastAccountNumber(95453526);
    }
    infile.close();
}

Account SkBank::OpenAccount(string fname,string lname,string type,float amount)
{

    ofstream outfile;
    Account account(fname,lname,type,amount);
    outfile.open("SkBank.data",ios::trunc);
    accounts.insert(pair<long,Account>(account.getAccNo(),account));
    map<long,Account>::iterator it;
    for(it=accounts.begin();it!=accounts.end();it++)
    {
        outfile<<it->second;
    }
    outfile.close();
    return account;
}
Account SkBank::BalanceEnquiry(long accountNumber)
{
    map<long,Account>::iterator itr=accounts.find(accountNumber);
    return itr->second;
}
Account SkBank::Deposit(long accountNumber,float amount)
{

    map<long,Account>::iterator itr=accounts.find(accountNumber);
    if(itr==accounts.end())throw runtime_error("Account not found");
    itr->second.Deposit(amount);
    //cout<<accounts[accountNumber]<<endl;
    ofstream outfile;
    outfile.open("SkBank.data",ios::trunc);
    for(auto it=accounts.begin();it!=accounts.end();it++)
    {
        outfile<<it->second;
    }
   // outfile<<itr->second;
    outfile.close();
    return itr->second;
}
Account SkBank::Withdraw(long accountNumber,float amount)
{

    map<long,Account>::iterator itr=accounts.find(accountNumber);
    if(itr==accounts.end())
    {
        throw runtime_error("Account not Found");
    }
    itr->second.Withdrawl(amount);
    ofstream outfile;
    outfile.open("SkBank.data",ios::app);
    for(auto it=accounts.begin();it!=accounts.end();it++)
    {
        outfile<<it->second;
    }
    outfile.close();
    return itr->second;
}
void SkBank::CloseAccount(long accountNumber)
{

    map<long,Account>::iterator itr=accounts.find(accountNumber);
    if(itr!=accounts.end())
    {
        cout<<"Account Number "<<itr->first<<" Deleted";
        accounts.erase(accountNumber);
        ofstream outfile;
        outfile.open("SkBank.data",ios::trunc);

        map<long,Account>::iterator it;
        for(it=accounts.begin();it!=accounts.end();it++)
        {

             outfile<<it->second;
        }
        outfile.close();
    }
    else{
        cout<<endl<<"Account not found"<<endl;
    }


}
void SkBank::ShowAllAccounts()
{
 map<long,Account>::iterator itr;
 for(itr=accounts.begin();itr!=accounts.end();itr++)
 {
   cout<<endl<<"Account "<<itr->first<<endl<<itr->second<<endl;
 }
}
SkBank::~SkBank()
{

    ofstream outfile;
    outfile.open("Bank.data",ios::trunc);
    map<long,Account>::iterator itr;
    for(itr=accounts.begin();itr!=accounts.end();itr++)
    {

        outfile<<itr->second;
    }
    outfile.close();
}

